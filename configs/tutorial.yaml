run: [train, test]

cutoff_radius: 5.0
chemical_symbols: [C, O, H]
model_type_names: ${chemical_symbols}

data:
  _target_: nequip.data.datamodule.sGDML_CCSD_DataModule
  dataset: aspirin
  data_source_dir: aspirin_data
  transforms:
    - _target_: nequip.data.transforms.NeighborListTransform
      r_max: ${cutoff_radius}
    - _target_: nequip.data.transforms.ChemicalSpeciesToAtomTypeMapper
      chemical_symbols: ${chemical_symbols}
  trainval_test_subset: [40, 10]
  train_val_split: [30, 10]
  seed: 123
  train_dataloader_kwargs:
    batch_size: 1
  val_dataloader_kwargs:
    batch_size: 5
  test_dataloader_kwargs: ${data.val_dataloader_kwargs}
  stats_manager:
    _target_: nequip.data.DataStatisticsManager
    metrics:
      - field:
          _target_: nequip.data.NumNeighbors
        metric: 
          _target_: nequip.data.Mean
        name: num_neighbors_mean
      - field:
          _target_: nequip.data.PerAtomModifier
          field: total_energy
        metric:
          _target_: nequip.data.Mean
        name: per_atom_energy_mean
      - field: forces
        metric:
          _target_: nequip.data.RootMeanSquare
        per_type: true
        name: per_type_forces_rms

trainer:
  _target_: lightning.Trainer
  max_epochs: 5
  check_val_every_n_epoch: 1
  log_every_n_steps: 5
  callbacks:
    - _target_: lightning.pytorch.callbacks.ModelCheckpoint
      dirpath: ${hydra:runtime.output_dir}
      save_last: true

training_module:
  _target_: nequip.train.NequIPLightningModule
  loss:
    _target_: nequip.train.MetricsManager
    metrics:
      - name: force_MSE
        field: forces
        coeff: 1
        metric:
          _target_: nequip.train.MeanSquaredError
  val_metrics: 
    _target_: nequip.train.MetricsManager
    metrics:
      - name: force_RMSE
        field: forces
        metric:
          _target_: nequip.train.RootMeanSquaredError
  test_metrics: ${training_module.val_metrics}
  optimizer:
    _target_: torch.optim.Adam

  model:
    _target_: allegro.model.AllegroModel

    # === basic model params ===
    seed: 456
    model_dtype: float32
    type_names: ${model_type_names}
    r_max: ${cutoff_radius}

    # == bessel encoding ==
    num_bessels: 8                # number of basis functions used in the radial Bessel basis, the default of 8 usually works well
    bessel_trainable: false       # set true to train the bessel weights (default false)
    polynomial_cutoff_p: 6        # p-exponent used in polynomial cutoff function, smaller p corresponds to stronger decay with distance

    # optionally, apply additional MLP to bessel encoding
    #radial_basis_mlp_kwargs:
    #  mlp_latent_dimensions: [32]
    #  mlp_nonlinearity: silu
    #  mlp_initialization: uniform

    # === symmetry ===
    # maximum order l to use in spherical harmonics embedding, 1 is baseline (fast), 2 is more accurate, but slower, 3 highly accurate but slow
    l_max: 1
    # whether to include parity symmetry equivariance
    # allowed: o3_full, o3_restricted, so3
    parity_setting: o3_full   

    # === allegro layers ===
    # number of tensor product layers, 1-3 usually best, more is more accurate but slower
    num_layers: 2
    
    # number of tensor features, more is more accurate but slower, 1, 4, 8, 16, 64, 128 are good options to try depending on data set
    num_tensor_features: 32

    two_body_latent_kwargs:
      mlp_latent_dimensions: [64, 128]
      mlp_nonlinearity: silu
      mlp_initialization: uniform

    latent_kwargs:
      mlp_latent_dimensions: [128, 128]
      mlp_nonlinearity: silu
      mlp_initialization: uniform
 
    env_embed_kwargs:
      mlp_latent_dimensions: []
      mlp_nonlinearity: null
      mlp_initialization: uniform

    # === edge MLP ===
    edge_eng_kwargs:
      mlp_latent_dimensions: [32]
      mlp_nonlinearity: null
      mlp_initialization: uniform

    # average number of neighbors for edge sum normalization
    avg_num_neighbors: ${training_data_stats:num_neighbors_mean}
    
    # == per-type per-atom scales and shifts ==
    per_type_energy_shifts: ${training_data_stats:per_atom_energy_mean}
    per_type_energy_scales: ${training_data_stats:per_type_forces_rms}
    per_type_energy_scales_trainable: false
    per_type_energy_shifts_trainable: false

    # == ZBL pair potential ==
    pair_potential:
      _target_: nequip.nn.pair_potential.ZBL
      units: real     # Ang and kcal/mol, LAMMPS unit names;  allowed values "metal" and "real"
      chemical_species: ${chemical_symbols}   # must tell ZBL the chemical species of the various model atom types

# global options
global_options:
  seed: 789
  allow_tf32: false
